{"version":3,"sources":["../src/index.js"],"names":["marksy","options","renderer","tokenizer","marked","use","tracker","tree","elements","nextElementId","toc","currentIdLevel","currentId","code","language","elementId","components","Object","keys","map","key","mockedReact","tag","props","componentProps","indexOf","assign","context","children","createElement","Function","push","e","compile","content","markedOptions","smartypants"],"mappings":"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","sourcesContent":["import marked from 'marked';\nimport createRenderer, { codeRenderer } from './createRenderer';\n\nexport function marksy (options = { renderer: {}, tokenizer: {} }) {\n  marked.use({ tokenizer: options.tokenizer })\n  const tracker = {\n    tree: null,\n    elements: null,\n    nextElementId: null,\n    toc: null,\n    currentIdLevel: 0,\n    currentId: [],\n  };\n\n  const renderer = createRenderer(tracker, options, {\n    code (code, language) {\n      if (language === 'marksy') {\n        try {\n          // eslint-disable-next-line no-plusplus\n          const elementId = tracker.nextElementId++;\n\n          const components = Object.keys(options.components).map(key => options.components[key]);\n          const mockedReact = (tag, props = {}, ...children) => {\n            const componentProps =\n              components.indexOf(tag) >= 0\n                ? Object.assign(props || {}, {\n                  // eslint-disable-next-line no-plusplus\n                  key: tracker.nextElementId++,\n                  context: tracker.context,\n                })\n                : props;\n\n            return options.createElement(tag, componentProps, children);\n          };\n\n          tracker.elements[elementId] =\n            // eslint-disable-next-line no-new-func\n            new Function('h', ...Object.keys(options.components), `return ${code}`)(\n              mockedReact,\n              ...components\n            ) || null;\n\n          tracker.tree.push(tracker.elements[elementId]);\n\n          return `{{${elementId}}}`;\n        } catch (e) {\n          //\n        }\n        return null;\n      }\n      return codeRenderer(tracker, options)(code, language);\n    },\n    ...options.renderer\n  });\n\n  return function compile (content, markedOptions = {}, context = {}) {\n    tracker.tree = [];\n    tracker.elements = {};\n    tracker.toc = [];\n    tracker.nextElementId = 0;\n    tracker.context = context;\n    tracker.currentId = [];\n  \n    marked(content, { renderer, smartypants: true, ...markedOptions });\n\n    return { tree: tracker.tree, toc: tracker.toc };\n  };\n}\n\nexport default function (options) {\n  return marksy(options);\n}\n"],"file":"index.js"}